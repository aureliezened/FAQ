// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240626100205_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Models.ChatHistory", b =>
                {
                    b.Property<int>("historyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("historyId"));

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("historyId");

                    b.HasIndex("userId");

                    b.ToTable("ChatHistories", (string)null);
                });

            modelBuilder.Entity("Common.Models.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("roleId"));

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("roleId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Common.Models.Statistics", b =>
                {
                    b.Property<int>("statisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("statisticId"));

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<int?>("day")
                        .HasColumnType("integer");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.Property<string>("month")
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("statisticId");

                    b.HasIndex("userId");

                    b.ToTable("Statistics", (string)null);
                });

            modelBuilder.Entity("Common.Models.User", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("joinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("roleId")
                        .HasColumnType("integer");

                    b.Property<int>("userIdentifier")
                        .HasColumnType("integer");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userId");

                    b.HasIndex("roleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Common.Models.UserToken", b =>
                {
                    b.Property<int>("tokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("tokenId"));

                    b.Property<string>("refreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("refreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.Property<DateTime?>("tokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("tokenId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Common.Models.ChatHistory", b =>
                {
                    b.HasOne("Common.Models.User", "user")
                        .WithMany("chatHistory")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Common.Models.Statistics", b =>
                {
                    b.HasOne("Common.Models.User", "user")
                        .WithMany("statistics")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Common.Models.User", b =>
                {
                    b.HasOne("Common.Models.Role", "role")
                        .WithMany("users")
                        .HasForeignKey("roleId")
                        .IsRequired();

                    b.Navigation("role");
                });

            modelBuilder.Entity("Common.Models.UserToken", b =>
                {
                    b.HasOne("Common.Models.User", "user")
                        .WithOne("userToken")
                        .HasForeignKey("Common.Models.UserToken", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Common.Models.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("Common.Models.User", b =>
                {
                    b.Navigation("chatHistory");

                    b.Navigation("statistics");

                    b.Navigation("userToken");
                });
#pragma warning restore 612, 618
        }
    }
}
